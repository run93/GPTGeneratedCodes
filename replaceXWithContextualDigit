function replaceX(columnA, columnB) {
    if (!columnB) {
        return ''; // If columnB is empty, return an empty string
    }

    if (!columnB.includes('X')) {
        return columnB; // If columnB does not contain "X", return columnB directly
    }

    // Handle specific cases for "First" and "Last"
    const specificPlaceholders = [
        { placeholder: 'FirstXMinute', regex: /first (\d+) minutes?/i },
        { placeholder: 'LastXMinute', regex: /last (\d+) minutes?/i },
        { placeholder: 'FirstXDay', regex: /first (\d+) days?/i },
        { placeholder: 'LastXDay', regex: /last (\d+) days?/i },
        { placeholder: 'LastXDays', regex: /last (\d+) days?/i },
        { placeholder: 'LastXHours', regex: /last (\d+) hours?/i }
    ];

    specificPlaceholders.forEach(({ placeholder, regex }) => {
        const match = columnA.match(regex);
        if (match) {
            const numberPart = match[0].match(/\d+/)[0];
            const specificReplacement = placeholder.replace('X', numberPart);
            columnB = columnB.replace(new RegExp(placeholder, 'ig'), specificReplacement);
        }
    });

    // Handle specific cases for "1-29 days"
    if (/(\d+-\d+ days?)/.test(columnA)) {
        const match = columnA.match(/(\d+)-(\d+) days?/);
        if (match) {
            columnB = columnB.replace('XDays', match[1] + 'to' + match[2] + 'Days');
            columnB = columnB.replace('XDay', match[1] + 'to' + match[2] + 'Day');
        }
    }

    // Handle specific cases for "90+ days"
    if (/(\d+\+ days)/.test(columnA)) {
        const match = columnA.match(/(\d+)\+ days/);
        if (match) {
            columnB = columnB.replace('XMoreDays', match[1] + 'MoreDays');
        }
    }

    // Handle specific cases for "30 or more days"
    if (/(\d+) or more days/.test(columnA)) {
        const match = columnA.match(/(\d+) or more days/);
        if (match) {
            columnB = columnB.replace('XMoreDays', match[1] + 'MoreDays');
        }
    }

    // Handle specific cases for "120+ DPD"
    if (/(\d+\+ DPD)/.test(columnA)) {
        const match = columnA.match(/(\d+)\+ DPD/);
        if (match) {
            columnB = columnB.replace('XPlus', match[1] + 'Plus');
        }
    }

    // Handle specific cases for "1-29 DPD" and similar patterns
    if (/(\d+-\d+ DPD)/.test(columnA)) {
        const match = columnA.match(/(\d+)-(\d+) DPD/);
        if (match) {
            columnB = columnB.replace('XDaysPastDue', match[1] + 'to' + match[2] + 'DaysPastDue');
        }
    }

    // General placeholders
    const regex = /(\d+\s?(day|days|month|months|year|years|minute|minutes|hour|hours))/ig;
    const matches = columnA.match(regex);

    if (matches) {
        let replacements = {};
        for (let match of matches) {
            let numberPart = match.match(/\d+/)[0];
            let textPart = match.match(/[a-zA-Z]+/)[0];
            let placeholder = 'X' + textPart[0].toUpperCase() + textPart.slice(1).toLowerCase();
            replacements[placeholder] = numberPart + textPart;
        }

        for (let placeholder in replacements) {
            while (columnB.includes(placeholder)) {
                columnB = columnB.replace(placeholder, replacements[placeholder]);
            }
        }
    }

    return columnB;
}
