import pandas as pd

# Sample mapping data
mapping_data = {
    'original_term': ['name of c', 'this is', 'example term', 'another example', 'sample'],
    'target_term': ['NC', 'T', 'ET', 'AE', 'S'],
    'term_type': ['A', 'B', 'C', 'D', 'E']
}

# Creating a DataFrame from the sample mapping data
mapping_df = pd.DataFrame(mapping_data)
# Remove duplicates
mapping_df = mapping_df.drop_duplicates()

# Sort the mapping dataframe by the length of 'original_term' in descending order
mapping_df['length'] = mapping_df['original_term'].apply(len)
mapping_df = mapping_df.sort_values(by='length', ascending=False).drop(columns=['length'])

# Sample sentences
sentences = ['this is a name of c', 'that is a name of c', 'this is', 'this is an example term', 'another example of a sample']

# Initialize the output dataframe
output_df = pd.DataFrame(columns=['Original Sentence', 'Mapped Sentences', 'Unmapped Terms', 'Type A', 'Type B', 'Type C', 'Type D', 'Type E'])

for sentence in sentences:
    mapped_sentence = sentence
    unmapped_terms = set(sentence.split())  # Initialize with all words in the sentence
    type_a = []
    type_b = []
    type_c = []
    type_d = []
    type_e = []
    
    for _, row in mapping_df.iterrows():
        original_term = row['original_term']
        target_term = row['target_term']
        term_type = row['term_type']
        
        if original_term in mapped_sentence:  # Check in mapped_sentence to handle replacements correctly
            mapped_sentence = mapped_sentence.replace(original_term, target_term)
            unmapped_terms -= set(original_term.split())  # Remove mapped terms from unmapped terms
            if term_type == 'A':
                type_a.append(target_term)
            elif term_type == 'B':
                type_b.append(target_term)
            elif term_type == 'C':
                type_c.append(target_term)
            elif term_type == 'D':
                type_d.append(target_term)
            elif term_type == 'E':
                type_e.append(target_term)
            break  # Stop after the first match

    output_df = output_df.append({
        'Original Sentence': sentence,
        'Mapped Sentences': mapped_sentence,
        'Unmapped Terms': ' '.join(unmapped_terms),
        'Type A': ' '.join(type_a),
        'Type B': ' '.join(type_b),
        'Type C': ' '.join(type_c),
        'Type D': ' '.join(type_d),
        'Type E': ' '.join(type_e)
    }, ignore_index=True)

# Display the output dataframe
import ace_tools as tools; tools.display_dataframe_to_user(name="Mapped Sentences Output", dataframe=output_df)
