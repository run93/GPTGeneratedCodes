import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
from rank_bm25 import BM25Okapi
from nltk.tokenize import word_tokenize
import nltk

# Download NLTK tokenizer
nltk.download('punkt')

# ------------------------------
# Step 1: Setup Data
# ------------------------------

corpus = [
    "The company reported strong quarterly earnings.",
    "Annual financial results were released today.",
    "Revenue increased by 10% in the last quarter.",
    "Employee records and salary details are confidential.",
    "Market trends show a positive outlook for the next quarter.",
]

queries = [
    "quarterly financial earnings",
    "employee salary information",
    "market trends for next quarter"
]

# ------------------------------
# Step 2: BM25 Sparse Retrieval
# ------------------------------

# Tokenize the corpus for BM25
tokenized_corpus = [word_tokenize(doc.lower()) for doc in corpus]
bm25 = BM25Okapi(tokenized_corpus)

# ------------------------------
# Step 3: MiniLM Dense Retrieval
# ------------------------------

# Load MiniLM model and generate embeddings
model = SentenceTransformer('all-MiniLM-L6-v2')
corpus_embeddings = model.encode(corpus, convert_to_tensor=True)

# ------------------------------
# Step 4: Compute Scores for Each Query and Store Results
# ------------------------------

results = []
alpha = 0.6  # Weight towards BM25 (adjustable)

for query in queries:
    tokenized_query = word_tokenize(query.lower())
    
    # Compute BM25 scores
    bm25_scores = bm25.get_scores(tokenized_query)
    
    # Compute dense embeddings and cosine similarity
    query_embedding = model.encode(query, convert_to_tensor=True)
    dense_scores = util.cos_sim(query_embedding, corpus_embeddings).squeeze().cpu().numpy()
    
    # Compute hybrid scores
    hybrid_scores = [alpha * bm25_score + (1 - alpha) * dense_score for bm25_score, dense_score in zip(bm25_scores, dense_scores)]
    
    # Rank documents by combined scores
    ranked_results = sorted(
        zip(corpus, bm25_scores, dense_scores, hybrid_scores),
        key=lambda x: x[3], reverse=True  # Sort by hybrid score
    )[:5]  # Get Top 5 results
    
    # Store results in dataframe format
    for rank, (doc, bm25_score, dense_score, hybrid_score) in enumerate(ranked_results, 1):
        results.append({
            "Query": query,
            "Rank": rank,
            "Document": doc,
            "BM25 Score": round(bm25_score, 4),
            "Dense Score": round(dense_score, 4),
            "Hybrid Score": round(hybrid_score, 4)
        })

# Convert results to DataFrame and save
df_results = pd.DataFrame(results)
df_results.to_csv("hybrid_retrieval_results.csv", index=False)

print("\nâœ… Hybrid Retrieval Results Saved as 'hybrid_retrieval_results.csv'")
print(df_results.head(10))  # Display first 10 results
